// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Composer 1`] = `
"scalar DateTime
scalar DomainName
scalar EmailAddress
scalar IPv4Address
scalar Object

input TodoChecklistInput {
  solved: Boolean
  text: String!
}

input TodoInput {
  checklist: [TodoChecklistInput!]
  deadlineAt: DateTime
  description: String
  flag: TodoFlag
  solved: Boolean
  title: String
}

input TodoSearchInput {
  limit: Int
  offset: Int
  solved: Boolean
}

type TodoMutation {
  add(todo: TodoInput!): Todo!
  delete(id: [Int!]!): [Boolean!]!
  update(id: Int!, todo: TodoInput!): Todo
}

type Todo {
  checklist: [TodoChecklist!]!
  deadlineAt: DateTime
  description: String
  flag: TodoFlag
  id: Int!
  solved: Boolean!
  title: String!
  code: String!
  timestamp: Int!
}

type TodoChecklist {
  solved: Boolean
  text: String!
}

enum TodoFlag {
  NONE
  PRIVATE
  PUBLIC
}

type IPageableTodo {
  count: Int!
  limit: Int!
  node: [Todo!]!
  offset: Int!
}

type TodoQuery {
  count(solved: Boolean = true): Int!
  search(filter: TodoSearchInput): IPageableTodo!
  searchAll(limit: Float = 10, offset: Float = 0): IPageableTodo!
  todo(id: Int!): Todo
}

type TestMutation {
  todo: TodoMutation!
}

type TestQuery {
  domain: DomainName!
  email: EmailAddress!
  ipv4: IPv4Address!
  optional: Float
  random: Float!
  todo: TodoQuery!
  timestamp: Float!
  config: Boolean!
  hello: String!
}

type TestSubscription {
  onTodoAdded: Todo!
  onTodoDelete: Todo!
  onTodoUpdate: Todo!
}

schema {
  mutation: TestMutation
  query: TestQuery
  subscription: TestSubscription
}"
`;
